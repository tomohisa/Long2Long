[音楽]
0:11 
皆さん、お越しいただきありがとうございます。これはドメインモデリングを関数型で行うという話で、
0:18
以前に聞いたことがなければ、これらの質問の答えは分からないかもしれません。でも始める前に、ちょっとした課題があります。
課題
0:30
これは私が使用するF#のコードですが、コードの内容自体は重要ではありません。これはレコード型の一種で、フィールドがあり、メールアドレスがあり、
0:35
is_email_verifiedというフラグがあります。これは、メールの所有者であることをリンクをクリックして証明した場合にtrueにする必要があります。
0:41
もしコードレビューでこのコードを見たら、このままでいいと思いますか? それとも変更したいですか? 変更したい場合は、その理由は何でしょうか?
0:48
プリミティブ型を使用しているのは良いことですか? 他には
1:14
状態が複雑なものをブール値で表現しているので理解しにくいですね。そうですね。
1:22
正直なところ、数年前の私はこれでも問題ないと思っていたでしょう。でも、こういう設計について考え方が変わってきました。このトークでは、
1:28 
どのように考え方が変わったのか、そしてなぜこういったものを変更したくなるのかについて説明しようと思います。
1:36
ドメインモデリングを関数型で
1:41
ドメインモデリングを関数型で、私はスコット・ウルションと申します。ツイッターのハンドルとFsharpforfun.comというサイトがあります。
1:49
全ての例でF#を使用しますが、これはF#についての話ではなく、ドメインモデリングについての話です。
1:56
関数型プログラミングのコミュニティとドメイン駆動設計のコミュニティがあり、
2:02
私はちょうどその交差点にいます。現在、この交差点はとても小さいです。なぜなら関数型プログラミングの人たちは数学的傾向が強く、ドメイン設計にあまり興味がないからです。
2:08
一方、ドメイン駆動設計の人たちは関数型プログラミングにあまり興味がありません。
2:13
うまくいけば、このトークであなたにこれらのことの大切さを説得できるでしょう。
2:19
はい、以下の文章を和訳いたします。

------
実際のところ、関数型プログラミングと領域駆動設計は非常に相性が良いのです。多くの人は関数型プログラミングは数学や
Functional Programming
2:27
並列処理に適していて、理解するにはコンピュータサイエンスの博士号が必要だと考えていますが、
2:32
私は関数型プログラミングが退屈なビジネスアプリケーション、つまり
2:39
blubbers（私はこれをblubbers と呼んでいます）に本当に適していると言いたいのです。これは会計、
2:45
在庫管理、電子商取引など、退屈なものです。
2:50
基本的に、ほとんどのビジネスが行っているもので、おそらくあなた方のほとんど、そして確かに私がかつて行っていたのはこれです。
2:55
これはあなたの日常業務であり、あなたが生計を立てているものなのです。そして、関数型プログラミングは実際にこういったものに本当に適していると私は考えています。それは
3:02
ファンシーなものに適しているだけでなく、退屈なものにも適しているのです。だから私は関数型プログラミング
3:08
と領域駆動設計が実際に一緒にやっていけること、実際に友達になれることを説得しようと思います。
3:14
そういうことです。それでは、設計について話しましょう。設計が重要な理由について、私の考えをお話ししたいと思います。
Design
3:22
他のプロセスと同じように、ソフトウェア開発はプロセスであり、インプットがあって何かをして
3:28
アウトプットがあります。そして、私たちはプロセスについて話すのが大好きです。コーディングやテスティングについて、
3:36
最高のコンパイラは何か、最高のエディタは何か、VimとEmacsのどちらが良いか、TDDとBDDのどちらが良いか、といったことを話すのが大好きです。
3:45
しかし、ご存知の通り、ゴミを入れればゴミが出てくる（garbage in, garbage out）ということは、
3:52
インプットが悪ければ、アウトプットも悪くなるということを意味します。だから、ゴミを減らすことができれば、
3:59
出てくるゴミも減らすことができるでしょう。最高の
4:07
コンパイラ、最高のエディタ、最高のツールキット、最高の開発プロセスでも、インプットに悪いゴミが入ってきたら助けにはなりません。
4:13
結局、悪いものを提供することになってしまいます。だから、インプットのゴミを減らそうという考え方を、私は
4:19
設計と呼んでいるのです。つまり、構築を始める前に何が起きているのかを理解しようとすることの総称なのです。
4:27
------
どのようにして正しい設計を行うのでしょうか。それが私たちがここにいる理由だと思います。これを解明しようとする自信があるのです。つまり、2つの部分があります。
Agile Contribution
4:32
1つ目は、アジャイルの貢献から学ぶことは、迅速なフィードバックを得ること、そして何かをして、できるだけ早くそこから学ぶことです。6ヶ月かけて何かを提供するのではなく、2週間、1週間、あるいは数日で何かを提供しようとしてください。そして、DDDから私が考えるのは、ドメイン
4:51
ドリブンデザインは、実際に共有メンタルモデルを作成しようとしていることです。誰もが同じページにいて、同じ考え方をしていて、同じ言葉を使っているのです。その共有メンタルモデルは、コードの中にもあります。単に
Shared Model
5:04
人々の頭の中だけではないのです。ここに共有メンタルモデルの小さな図があります。そこには専門家、ドメインの専門家、主題の