[音楽]
0:11
皆様のご来場、ありがとうございます。これはメインモデルを機能的にするというもので
0:18
今まで見たことがないと思うので、全ての質問の答えがわかってしまうことはないでしょう。ですが始める前に、実はちょっとしたチャレンジをご用意していました。それはこちらの
チャレンジ
0:30
コードです。これは私がお見せするF#のコードで、実際のコードはそれほど重要ではありませんが、レコードタイプのようなもので、これらのフィールドとEメールアドレスがあり、そしてこれが
0:41
「is email verified」というフラグで、自分のメールアドレスをクリックしたリンクで証明した場合にのみtrueとなります。したがって、仮にこのコードをコードレビューで見かけたら、どう思いますか？
0:55
それとも、何か変えたいと思うものがありますか？なぜそれを変えたいと思うのでしょうか？
1:03
それはプリミティブなタイプを使用しているからでしょうか？何か他には？
1:14
ええ、その状態は非常に理解が難しく、何かもっと複雑なことを表現するためにブーリアンを使っています、そしてそうですね、、、
1:22
正直なところ、数年前だったら、これで十分だと思っていたかもしれませんが、このような設計についての考え方は進化し続けています。そして今後の話の中で、私がどう進化してきたのか、なぜあなたもこうした変更を考える必要があるのか、それを説明しようと思います。
1:36
というわけで、
ドメインモデリング・ファンクショナルについて
1:41
僕の名前はスコット・ヴォルーションで、Twitterのハンドル名を持っていますし、F sharp F on profit.comというサイトでも活動しています。F#を全ての例で使用していますが、これは必ずしもF#についての話ではありません。本題はドメインモデリングです。そこでは、関数型プログラミングの人々がいたり、ドメイン駆動設計の人々がいたりしますが、
2:02
私はその交差点にいます。現在のところ、この交差点は非常に小さなものです。なぜなら、関数型プログラミングの人々は数学的な思考に走りがちで、ドメイン設計には興味がなく、一方、ドメイン設計の人々は関数型プログラミングに興味を持っていないからです。まぁこの話を聞いて、これらのことに対する興味を持ってもらえればと思います。
2:19
実際、機能的なプログラミングは数学にとてつもなく適していると人々はよく考えますが、
機能的なプログラミング
2:27
並行処理やコンピュータサイエンスの博士号を持っていなければ理解できないと話しますが、私が伝えたいのは、機能的なプログラミングが実際には退屈なビジネスアプリケーションにも適しているということです
2:39
これを私は「ブルバーズ」と呼んでいます。会計や
2:45
在庫管理、Eコマースのようなもの、つまり退屈なものです
2:50
基本的には、ほとんどのビジネスが行うこと、おそらくあなたが行うこと、私がかつて行っていたこと、これがあなたの仕事です。これで生計を立てていきます。そして私は、機能的なプログラミングが実際にはこのようなものにも適していると思います。それは、それは
3:02
ただ洗練されたものに良いだけでなく、退屈なものにも良いということです。だから私は、機能的なプログラミングと
3:08
ドメイン設計が実際には協力関係にあること、友人関係にあることを示そうとします。だからですから、それがどんなものであるかを話し合いましょう。私はあなたになぜデザインが重要なのか、私の見解をお話しします。
デザイン
3:22
ソフトウェア開発のようなあらゆるプロセスは、入力があり、何かを行い、出力があります。私たちはプロセスについて話すのが好きです、コーディングやテストについて、
3:36
最善のコンパイラは何か、最善のエディタは何か、Vim対Emacs、TDD対BDDなど、私たちはこれら全てのことについて話すのが好きです。しかし、ゴミの入力、ゴミの出力という考え方を思い出してみてください。これは、
3:52
悪い入力があれば、悪い出力があるということを意味します。ですから、入ってくるゴミを減らすことができれば、出力するゴミも減らすことができるでしょう。悪いゴミが入ってくると、
4:07
最善のコンパイラでも、最善のエディタでも、最善のツールキットでも、最善の開発プロセスでも、あなたを助けることはできません。
4:13
それでも、何か悪いものを提供する結果となるでしょう。だから、入ってくるゴミを減らすというアイデアは、私はそれを
4:19
デザインと呼んでいます。これは、何が起こっているのかを理解しようとする一般的な言葉で、それを構築する前に、
4:27
デザインをどのように正しく行うか、私はそれが私たち全員がここにいる理由だと思います。このことを試みて解明する信頼性があります。で、2つあります。
敏捷貢献
4:32
1つ目は、敏捷貢献から取る部分で、それは迅速なフィードバックを得ること、そして知っていること
4:39
そして可能な限り速くそれから学ぶことです。何かを提供するのに半年かけるのではなく、2週間か1週間、または数日で何かを提供しようとします。そして、DDDからは、ドメイン
4:51
駆動設計は実際には全員が同じページにいて、全員が同じ考え方をして、全員が
4:57
同じ言葉を使っているという共有の精神モデルを作り出そうとしていると考えるのが好きです。そして、その共有の精神モデルはコードにも存在します。それはただ
共有モデル
5:04
人々の頭の中にあるだけではありません。ここに共有の精神モデルの小さな絵があります。そして、私たちは専門家、ドメインの専門家、主題の専門家を持っています。