[音楽]
0:11
みなさん、来ていただきありがとうございます。これはメインモデリングが機能的になったもので、
0:18
以前にこれを見たことがあれば、これからの質問の答えをすべて知ってしまうかもしれませんが、始める前に、実際に私が皆さんに挑戦してほしいことがあります。それはこちら、
挑戦
0:30
これはF#のコードで、私が使用するコードですが、実際にはコード自体は重要ではありません。これはある種のレコード型で、フィールドがあり、電子メールアドレスがあり、
0:41
そして「is email verified」というフラグがありますが、これは電子メールの所有者がリンクをクリックすることで証明した場合にのみ真でなければなりません。なので、コードレビューでこのコードを見たら、これで満足しますか、それとも変更したいですか？変更したい場合、どうして変更したいのですか？
0:55
原始型を使用していますが、それ以外に？
1:14
はい、状態が分かりにくいですね。もっと複雑なものを表現するためにブール型を使用していますが、そうですね。
1:22
正直に言って、数年前なら私はこれで満足していたかもしれませんが、このような設計について考え方が進化しました。そして、このトークで説明しようと思っています。私がどう進化したか、そしてなぜ、あなたも物事を変えることを考えたいかもしれない理由を。
ドメインモデリングが機能的に
1:41
ドメインモデリングが機能的に、私の名前はScott Volutionです。Twitterハンドルがあり、F sharp F on profit.comがあります。これらの例にはすべてF#を使いますが、これはF#そのものについてではなく、ドメインモデリングについてです。関数型プログラミングの人たちがいて、ドメイン駆動設計の人たちもいますが、
1:56
私はその交差点にいます。現在、これはとても小さな交差点です。なぜなら、関数型プログラミングの人たちは数学的であり、ドメイン設計にはあまり関心がなく、ドメイン設計の人たちは関数型プログラミングにあまり興味を持っていないからです。なので、このトークが、これらのことを説得力を持って伝えることを願っています。
実際には、非常に非常にうまくいくことができる。人々は関数型プログラミングが、数学向けであり、
関数型プログラミング
2:27
並列処理に適しており、それを理解するには、コンピューターサイエンスの博士号が必要だと思っていますが、
2:32
ここで言っておきたいのは、関数型プログラミングは、退屈な業務アプリケーションに本当に適しているということです
2:39
私はこれらをblubbersと呼んでいます。そして、これは会計や
2:45
在庫管理、Eコマースなど、退屈なものです
2:50
基本的に、ほとんどの企業が行っていることであり、おそらくほとんどの方々、そして確実に私がかつて行っていたことです。これは
2:55
あなたの日常の仕事であり、生計を立てるために行っていることです。そして、私は関数型プログラミングが実際にこのようなことにとても適していると思います。それは
3:02
ただのファンシーなものだけでなく、退屈なものにも適しているのです。ですから、関数型プログラミングと
3:08
ドメイン設計が実際にうまくいけること、実際に仲良くできることを説得しようと思います。
3:14
そうですね。では、設計について話しましょう。設計が重要な理由について私の見解をお話ししようと思います。
設計
3:22
どんなプロセスもソフトウェア開発もプロセスであり、入力があり何かを行い
3:28
出力があります。私たちはプロセスについて、コーディングやテストや
3:36
最高のコンパイラーや最高のエディター、vim対Emacs、または
3:45
TDD対BDDのようなことについて話すのが大好きですが、もしあなたが記憶しているなら、そのこと、「ゴミ入ればゴミ出る」ということは、
3:52
悪い入力があれば悪い出力があるということです。ですから、入ってくるゴミを減らすことができれば、
3:59
出て行くゴミも減らすことができるはずです。悪いゴミが入ってきても、最高の
4:07
コンパイラーやエディターやツールキットや開発プロセスが役立つわけではありません。
4:13
まだ何か悪いものを提供し終わることになります。ですから、入ってくるゴミを減らそうとするこのアイデアを、私はそれを
4:19
設計と呼んでいます。それは、建築を始める前に何が起こっているのかを理解しようとする一般的な言葉です。
デザインを正しく行うには、どうすればいいのでしょうか。我々全員がここにいる理由だと思います。これを解決しようとする自信があります。そのためには2つの
アジャイル貢献
4:32
部分があります。最初にアジャイル貢献から取り入れることは、迅速なフィードバックを得ることであり、何かを
4:39
行い、できるだけ早くそれから学ぶことです。6ヶ月かけて何かを提供するのではなく、2週間や1週間、あるいは数日で何かを提供しようとしてください。そして、DDDから私が考えるに、ドメイン
4:51
駆動設計は実際には共有されたメンタルモデルを作り出そうとすることです。全員が同じページにいて、全員が同じ方法で考え、全員が
4:57
同じ言葉を使用しているところです。そして、その共有されたメンタルモデルはコードにも存在し、単に
共有モデル
5:04
人々の頭の中にあるだけではありません。ここに共有メンタルモデルの小さな図があります。そして、私たちは専門家、ドメイン専門家、主題