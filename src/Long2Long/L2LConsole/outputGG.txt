[音楽]
0:11
お越しいただいた皆様、ありがとうございます。これはメインモデリングの機能であり、
0:18
それをご覧いただいたことがなければ、この質問の回答がわかるかもしれませんが、始める前に
0:24
実際にみなさんへのちょっとした課題があります。ここに
課題
0:30
コードがあります。これは F# コードで、私が使用する予定ですが、コードは実際には
0:35
重要ではありませんが、これはある種のレコードタイプで、これらのフィールドがあり、メールアドレスがあり、
0:41
[メールが検証済み] というフラグがあり、リンクをクリックしてメールで証明した場合に true になる必要があります。
0:48
このコードをコードで見かけた場合、満足できますか？それとも変更したいですか？変更したい場合は、なぜ変更したいですか。
1:03
原始的なタイプを使用していますか？
1:14
はい、状態は複雑なものを表現するためにブール値を使用するのが非常に難しいので、
1:22
つまり、正直に言うと、私はおそらく数年前はこの内容に満足していたでしょうが、この種の設計については考えを進化させてきました。
1:28
今回はその内容を説明しようと思います。なぜ私が進化したのか、何かを変更することを検討すべき理由を説明します。
ドメインモデリングの機能化
1:41
ドメインモデリングの機能化、私の名前はスコット・ヴォリューションです。私はツイッターハンドルを持っていて、F# F で利益を得ることがあります。
1:49
すべてのサンプルに F# を使用します。しかし、これは正確には F# に限ったことではなく、ドメインモデリングについてです。
1:56
機能型プログラミングの人々全体、ドメイン主導設計の人々のグループ全体がおり、
2:02
私はその交差点にいます。現在、この交差点はかなり限定的です。機能型プログラミングの人々はかなり数学的で、ドメイン設計には関心がなく、ドメイン設計の
2:08
人々は機能型プログラミングに興味がない傾向があるためです。そのため、このトークがこれらのものを説得できればと思います。
2:19
実際は非常にうまく適合することができます。人々は、関数型プログラミングが数学に向いていると考えていますし
関数型プログラミング
2:27
並列処理と、理解するにはコンピューターサイエンスの博士号を持っている必要があります
2:32
ただし、関数型プログラミングは、退屈な業務アプリケーションに非常に適していることをお伝えします
2:39
ロバーズ、私はこれらをブラバーズと呼んでおり、これは会計などのことを指します
2:45
在庫管理、Eコマース、退屈なもの
2:50
ほとんどの企業が取り組んでいる内容、またほとんどの方が取り組んでいる可能性が高く、私が取り組んでいたのはこれです
2:55
これがあなたの日常業務であり、これによって生活費を稼いでいます。関数型プログラミングは実際にはこのような内容に非常に適しています。これは単なるものではありません
3:02
それは単に優れた内容に向いているだけでなく、退屈な内容にも適しています。したがって、関数型プログラミングであることを説得しようとしています
3:08
そしてドメイン設計は実際には一緒に取り組むことが可能であり、実際には友達になることができます。だから
3:14
さぁ、始めましょう。デザインについて話したいと思います。デザインが重要な理由についての私の意見を伝えるために、ただ
デザイン
3:22
どのようなプロセスでも、ソフトウェアは開発されています。それはプロセスであり、入力があり、
3:28
何かを実行し、出力があります。そして私たちはプロセスについて話すことを好みます。コーディングやテストについて話すことを好みます。
3:36
最適なコンパイラは何ですか。最適なエディターは何ですか。つまり、Vim 対 Emacs、TDD 対 BDD、vus です
3:45
すべての話題について議論することを好みます。しかし、覚えておいてください。入力したものがすべて出力されることを意味します
3:52
入力内容が不十分な場合は出力内容も不十分になります。したがって、入力するものを減らせば
3:59
出力するものを減らすことができる可能性があります。入力内容が不十分な場合、最適な
4:07
コンパイラ、最適なエディタ、最適なツールキット、最適な開発プロセスでも助けにはなりません
4:13
それでも不十分なものを提供してしまうでしょう。入力するものを減らすことを試みる考え方を私は
4:19
デザインと呼びます。これは、作成を開始する前に何が起こっているかを理解しようとすることのための一般的な言葉に過ぎません。
アジャイルの貢献
4:32
パート1:アジャイルの貢献から採用する最初の要素は、迅速なフィードバックを得ることです。何かをやり、
4:39
それからできる限り速く教訓を得ることです。何かを提供するために6か月もかけるのではなく、
4:44
2週間、1週間、あるいは数日で何かを提供してみてください。それからDDDから、ドメイン
4:51
駆動設計は実際には、誰もが同じページにいて、誰もが同じように考え、同じ
4:57
単語を使用するという共有されたメンタルモデルを作成しようとするものだと思います。そして、その共有されたメンタルモデルはコードにもあります。単に
共有モデル
5:04
人々の頭の中にあるわけではありません。これは共有されたメンタルモデルの小さな絵で、専門家、ドメイン専門家、被験者